// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  bookings  Booking[]
  feedbacks Feedback[]
  files     File[]
  products  Product[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  category    String
  price       Float
  stock       Int
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  feedbacks   Feedback[]
}

model Supplier {
  id        String    @id @default(uuid())
  name      String
  contact   String
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  products  Product[]
}

model Service {
  id          String    @id @default(uuid())
  name        String
  price       Float
  duration    Int       // Duration in minutes
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookings    Booking[]
  feedbacks   Feedback[]
}

model Booking {
  id        String        @id @default(uuid())
  date      DateTime
  time      String        // Store as HH:mm format
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
}

model File {
  id            String    @id @default(uuid())
  fileName      String
  originalName  String
  mimeType      String
  size          Int
  uuid          String    @unique // For sharing
  expiredAt     DateTime
  downloadCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
} 